-- This query retrieves the type of pizzas sold on each day along with the total quantity sold for each type and Total sales amount for each type .
-- It joins the order details, orders, pizzas, and pizza types tables to get the necessary information.
-- The results are grouped by the date, the type and size of pizza.
USE jonpizza;
SELECT o.date, pt.name, p.size,SUM(od.quantity) as Total_Order, SUM(od.quantity * p.price) as Total_Sales_Amount 
FROM order_details od
Join 
	orders o ON od.order_id = o.order_id
Join 
	pizzas p ON od.pizza_id = p.pizza_id
Join 
	pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
Group By 
	o.date,
    pt.name, 
    p.size
ORDER By 
	o.date;

-- Finding out which size of pizza is popular within the classic category
-- The query sums the quantity of orders for each size of pizza within the classic category
-- and groups the results by pizza type and size

SELECT  pt.name, p.size, SUM(od.quantity) as Total_Order
 FROM order_details od
Join 
	orders o ON od.order_id = o.order_id
Join 
	pizzas p ON od.pizza_id = p.pizza_id
Join
	pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
WHERE pt.category='classic'
Group By 
	pt.name,
    p.size;

-- This query calculates the total sales amount generated by each pizza type and size.
-- It joins the order details, orders, pizzas, and pizza types tables.
-- The result is grouped by pizza type and size to show the total sales amount for each combination.
SELECT  pt.name, p.size, SUM(od.quantity * p.price) as Total_Sales_Amount 
FROM order_details od
Join 
	orders o ON od.order_id = o.order_id
Join 
	pizzas p ON od.pizza_id = p.pizza_id
Join
	pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
Group By 
	pt.name,
    p.size;

-- This query performs a seasonal sales analysis.
-- It calculates the total number of orders and total sales amount for each pizza category by month.
-- The DATE_FORMAT function is used to convert the date into a month name.
-- The results are grouped by month and pizza category, and include the total quantity of orders and total sales amount for each combination.

select DATE_FORMAT(o.date, '%M') AS Month,  pt.category, SUM(od.quantity) as Total_Order, SUM(od.quantity * p.price) as Total_Sales_Amount 
From order_details od
Join
	orders o ON od.order_id = o.order_id
Join 
	pizzas p ON od.pizza_id = p.pizza_id
Join 
	pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
Group By 
	Month,
    pt.category;


-- This query identifies the most popular pizza based on the total quantity ordered.
-- It aggregates the quantity of each pizza by its type and size, then selects the pizza with the highest total quantity.

SELECT pt.name , p.size , SUM(od.quantity) AS Total_Quantity
FROM order_details od
JOIN 
    orders o ON od.order_id = o.order_id
JOIN 
    pizzas p ON od.pizza_id = p.pizza_id
JOIN 
    pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
GROUP BY 
    pt.name, 
    p.size
ORDER BY 
    Total_Quantity DESC
LIMIT 1;

-- This query identifies the most popular time of day for orders based on the total quantity ordered.
-- It aggregates the quantity of orders by time and selects the time with the highest total quantity.

SELECT o.time ,SUM(od.quantity) AS Total_Quantity
FROM order_details od
JOIN 
    orders o ON od.order_id = o.order_id
JOIN 
    pizzas p ON od.pizza_id = p.pizza_id
JOIN 
    pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
GROUP BY 
    o.time
ORDER BY 
    Total_Quantity DESC
LIMIT 1;

-- This query identifies the top 3 pizzas based on the total sales amount.
-- It calculates the total sales amount for each pizza, ranks them, and selects the top 3.

WITH PizzaSales AS (
    SELECT 
        pt.name AS Pizza_Name, 
        SUM(od.quantity * p.price) AS Total_Sales_Amount,
        RANK() OVER (ORDER BY SUM(od.quantity * p.price) DESC) AS Sales_Rank
    FROM 
        order_details od
    JOIN 
        orders o ON od.order_id = o.order_id
    JOIN 
        pizzas p ON od.pizza_id = p.pizza_id
    JOIN 
        pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
    GROUP BY 
        pt.name
)
SELECT 
    Pizza_Name, 
    Total_Sales_Amount, 
    Sales_Rank
FROM 
    PizzaSales
WHERE 
    Sales_Rank <= 3;
    
-- Find pizzas with total sales amount above the average sales amount
WITH PizzaSales AS (
    SELECT 
        pt.name AS Pizza_Name, 
        SUM(od.quantity * p.price) AS Total_Sales
    FROM 
        order_details od
    JOIN 
        orders o ON od.order_id = o.order_id
    JOIN 
        pizzas p ON od.pizza_id = p.pizza_id
    JOIN 
        pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
    GROUP BY 
        pt.name
),
AverageSales AS (
    SELECT 
        AVG(Total_Sales) AS Avg_Sales
    FROM 
        PizzaSales
)
SELECT 
    ps.Pizza_Name, 
    ps.Total_Sales
FROM 
    PizzaSales ps
JOIN 
    AverageSales avg ON ps.Total_Sales > avg.Avg_Sales;
